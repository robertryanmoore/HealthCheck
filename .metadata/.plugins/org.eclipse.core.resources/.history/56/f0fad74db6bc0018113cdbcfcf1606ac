import static org.quartz.JobBuilder.newJob;
import static org.quartz.SimpleScheduleBuilder.simpleSchedule;
import static org.quartz.TriggerBuilder.newTrigger;

import java.util.Calendar;

import org.quartz.CronScheduleBuilder;
import org.quartz.DateBuilder;
import org.quartz.Job;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;

public class Quarts implements Job {

	public static void main(String[] args) throws SchedulerException {

		SchedulerFactory schedFact = new org.quartz.impl.StdSchedulerFactory();

		Scheduler sched = schedFact.getScheduler();

		sched.start();

		// define the job and tie it to our HelloJob class
		JobDetail job = newJob(HelloJob.class).withIdentity("myJob", "group1").build();

		Trigger morningTrig = TriggerBuilder.newTrigger().withIdentity("myTrigger", "group1").startAt(DateBuilder.todayAt(10, 20, 20)).withSchedule(CronScheduleBuilder.cronSchedule("0 16 11 ? * MON-FRI")).build();

		Trigger middayTrig = TriggerBuilder.newTrigger().withIdentity("myTrigger", "group1").startAt(DateBuilder.todayAt(10, 20, 20)).withSchedule(CronScheduleBuilder.cronSchedule("0 17 11 ? * MON-FRI")).build();
		
		Trigger afternoonTrig = TriggerBuilder.newTrigger().withIdentity("myTrigger", "group1").startAt(DateBuilder.todayAt(10, 20, 20)).withSchedule(CronScheduleBuilder.cronSchedule("0 18 11 ? * MON-FRI")).build();
		
		// Tell quartz to schedule the job using our trigger
		sched.scheduleJob(job, morningTrig);
		sched.scheduleJob(job, middayTrig);
		sched.scheduleJob(job, afternoonTrig);

	}

	@Override
	public void execute(JobExecutionContext arg0) throws JobExecutionException {
		// TODO Auto-generated method stub

	}

}
